// <auto-generated />
using System;
using Domain.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace XM.Migrations
{
    [DbContext(typeof(EMSContext))]
    [Migration("20191209090016_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("XM.Models.Entity.AccessLevels", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("XM.Models.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("XM.Models.Entity.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Label")
                        .HasMaxLength(400);

                    b.Property<int?>("Points");

                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choice");
                });

            modelBuilder.Entity("XM.Models.Entity.Duration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AnswredTime")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LeaveTime")
                        .HasColumnType("date");

                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID");

                    b.Property<int>("RegistrationId")
                        .HasColumnName("RegistrationID");

                    b.Property<DateTime?>("RequestTime")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Duration");
                });

            modelBuilder.Entity("XM.Models.Entity.Genders", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("XM.Models.Entity.Languague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Languague");
                });

            modelBuilder.Entity("XM.Models.Entity.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasMaxLength(250);

                    b.Property<string>("UserName")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("XM.Models.Entity.Paper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(400);

                    b.Property<int>("ChoiceId")
                        .HasColumnName("ChoiceID");

                    b.Property<int>("RegistrationId")
                        .HasColumnName("RegistrationID");

                    b.Property<int?>("Scored");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Paper");
                });

            modelBuilder.Entity("XM.Models.Entity.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Base64")
                        .IsUnicode(false);

                    b.Property<string>("ContentType")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Descriptions")
                        .HasMaxLength(400);

                    b.Property<string>("FileName")
                        .HasColumnName("fileName");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("RecordId")
                        .HasColumnName("RecordID");

                    b.HasKey("Id");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("XM.Models.Entity.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Lebel");

                    b.Property<int?>("Point");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnName("QuestionTypeID");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("XM.Models.Entity.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("XM.Models.Entity.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessLevelId")
                        .HasColumnName("AccessLevelID");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<int?>("StudentId")
                        .HasColumnName("StudentID");

                    b.Property<int?>("TestId")
                        .HasColumnName("TestID");

                    b.Property<string>("Toaken")
                        .HasMaxLength(400);

                    b.Property<DateTime?>("TokenExpireTime")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("XM.Models.Entity.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("XM.Models.Entity.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FatherName")
                        .HasMaxLength(400);

                    b.Property<int?>("GenderId")
                        .HasColumnName("GenderID");

                    b.Property<string>("Name")
                        .HasMaxLength(400);

                    b.Property<string>("Nid")
                        .HasColumnName("NID")
                        .HasMaxLength(20);

                    b.Property<byte[]>("PassHash");

                    b.Property<int?>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("XM.Models.Entity.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(400);

                    b.Property<int?>("DurationInMinutes");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("XM.Models.Entity.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<int?>("GenderId")
                        .HasColumnName("GenderID");

                    b.Property<int?>("LoginId")
                        .HasColumnName("LoginID");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<int?>("RoleId")
                        .HasColumnName("RoleID");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("LoginId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("XM.Models.Entity.Choice", b =>
                {
                    b.HasOne("XM.Models.Entity.Question", "Question")
                        .WithMany("Choice")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Choice_QuestionID");
                });

            modelBuilder.Entity("XM.Models.Entity.Duration", b =>
                {
                    b.HasOne("XM.Models.Entity.Question", "Question")
                        .WithMany("Duration")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Duration_QuestionID");

                    b.HasOne("XM.Models.Entity.Registration", "Registration")
                        .WithMany("Duration")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Duration_RegistrationID");
                });

            modelBuilder.Entity("XM.Models.Entity.Paper", b =>
                {
                    b.HasOne("XM.Models.Entity.Choice", "Choice")
                        .WithMany("Paper")
                        .HasForeignKey("ChoiceId")
                        .HasConstraintName("FK_Paper_ChoiceID");

                    b.HasOne("XM.Models.Entity.Registration", "Registration")
                        .WithMany("Paper")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Paper_RegistrationID");
                });

            modelBuilder.Entity("XM.Models.Entity.Question", b =>
                {
                    b.HasOne("XM.Models.Entity.Category", "Category")
                        .WithMany("Question")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Question_CategoryID");

                    b.HasOne("XM.Models.Entity.QuestionType", "QuestionType")
                        .WithMany("Question")
                        .HasForeignKey("QuestionTypeId")
                        .HasConstraintName("FK_Question_TypeID");
                });

            modelBuilder.Entity("XM.Models.Entity.Registration", b =>
                {
                    b.HasOne("XM.Models.Entity.AccessLevels", "AccessLevel")
                        .WithMany("Registration")
                        .HasForeignKey("AccessLevelId")
                        .HasConstraintName("FK_Registration_AccessLevelID");

                    b.HasOne("XM.Models.Entity.Student", "Student")
                        .WithMany("Registration")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Registration_StudentID");

                    b.HasOne("XM.Models.Entity.Test", "Test")
                        .WithMany("Registration")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_Registration_TestID");
                });

            modelBuilder.Entity("XM.Models.Entity.Student", b =>
                {
                    b.HasOne("XM.Models.Entity.Genders", "Gender")
                        .WithMany("Student")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Student_GenderID");
                });

            modelBuilder.Entity("XM.Models.Entity.Users", b =>
                {
                    b.HasOne("XM.Models.Entity.Genders", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Users_GenderID");

                    b.HasOne("XM.Models.Entity.Login", "Login")
                        .WithMany("Users")
                        .HasForeignKey("LoginId")
                        .HasConstraintName("FK_Admin_LoginID");

                    b.HasOne("XM.Models.Entity.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_RoleID");
                });
#pragma warning restore 612, 618
        }
    }
}
